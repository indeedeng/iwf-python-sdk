version: "3.7"

services:
  app:
    # Using a Dockerfile is optional, but included for completeness.
    build:
      context: ..
      dockerfile: .devcontainer/Dockerfile
      # [Optional] You can use build args to set options. e.g. 'VARIANT' below affects the image in the Dockerfile
      # args:
      #   VARIANT: 3-bullseye

    volumes:
      # This is where VS Code should expect to find your project's source code and the value of "workspaceFolder" in .devcontainer/devcontainer.json
    - ..:/workspace:cached

      # Uncomment the next line to use Docker from inside the container. See https://aka.ms/vscode-remote/samples/docker-from-docker-compose for details.
      # - /var/run/docker.sock:/var/run/docker.sock

    # Overrides default command so things don't shut down after the process ends.
    command: /bin/sh -c "while sleep 1000; do :; done"

    # Runs app on the same network as the service container, allows "forwardPorts" in devcontainer.json function.
    networks:
    - temporal-network

    # Use "forwardPorts" in **devcontainer.json** to forward an app port locally.
    # (Adding the "ports" property to this file will not forward from a Codespace.)

    # Uncomment the next line to use a non-root user for all processes - See https://aka.ms/vscode-remote/containers/non-root for details.
    # user: vscode

    # Uncomment the next four lines if you will use a ptrace-based debugger like C++, Go, and Rust.
    # cap_add:
    #   - SYS_PTRACE
    # security_opt:
    #   - seccomp:unconfined

    depends_on:
    - temporal

  # Temporal services
  elasticsearch:
    container_name: temporal-elasticsearch-iwf
    environment:
    - cluster.routing.allocation.disk.threshold_enabled=true
    - cluster.routing.allocation.disk.watermark.low=512mb
    - cluster.routing.allocation.disk.watermark.high=256mb
    - cluster.routing.allocation.disk.watermark.flood_stage=128mb
    - discovery.type=single-node
    - ES_JAVA_OPTS=-Xms256m -Xmx256m
    - xpack.security.enabled=false
    image: elasticsearch:${ELASTICSEARCH_VERSION}
    networks:
    - temporal-network
    expose:
    - 9200
  postgresql:
    container_name: temporal-postgresql-iwf
    environment:
      POSTGRES_PASSWORD: temporal
      POSTGRES_USER: temporal
    image: postgres:${POSTGRESQL_VERSION}
    networks:
    - temporal-network
    ports:
    - 5432:5432
    volumes:
    - /var/lib/postgresql/data
  temporal:
    container_name: temporal-iwf
    depends_on:
    - postgresql
    environment:
    - DB=postgresql
    - DB_PORT=5432
    - POSTGRES_USER=temporal
    - POSTGRES_PWD=temporal
    - POSTGRES_SEEDS=postgresql
    - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
    - ENABLE_ES=true
    - ES_SEEDS=elasticsearch
    - ES_VERSION=v7
    image: temporalio/auto-setup:${TEMPORAL_VERSION}
    networks:
    - temporal-network
    ports:
    - 7233:7233
    volumes:
    - ./dynamicconfig:/etc/temporal/config/dynamicconfig
    labels:
      kompose.volume.type: configMap
  temporal-admin-tools:
    container_name: temporal-admin-tools-iwf
    depends_on:
    - temporal
    environment:
    - TEMPORAL_CLI_ADDRESS=temporal:7233
    image: temporalio/admin-tools:${TEMPORAL_VERSION}
    networks:
    - temporal-network
    stdin_open: true
    tty: true
  temporal-ui:
    depends_on:
    - temporal
    environment:
    - TEMPORAL_ADDRESS=temporal:7233
    - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    image: temporalio/ui:${TEMPORAL_UI_VERSION}
    networks:
    - temporal-network
    ports:
    - 8080:8080
  iwf-server:
    container_name: iwf-server
    image: iworkflowio/iwf-server:latest #NOTE: you can change to version tag like v1.0.0-RC6
    environment:
    - AUTO_FIX_WORKER_URL=172.17.0.1   # this will let iwf-server automatically replace all iwfWorkerUrls of "localhost" or "127.0.0.1" with "172.17.0.1"
    networks:
    - temporal-network
    ports:
    - 8801:8801
    depends_on:
    - temporal

networks:
  temporal-network:
    driver: bridge
    name: temporal-network
